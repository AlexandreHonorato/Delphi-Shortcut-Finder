unit nick.shortcut.element.MMX10;

interface

uses
  nick.shortcut.element.DLLExpertBase,
  nick.shortcut.repository.IRegistry,
  {$IFDEF VER220}
  Windows,
  Classes;
  {$ELSE}
  Winapi.Windows,
  System.Classes;
  {$ENDIF}

type
  TMMX10Element = class(TDLLExpertBaseElement)
  private
  protected
    function EnabledDecoder(const ARegistryRepository : IRegistryRepository; const ASectionKey : string) : Boolean;
    function ShortCutDecoder(const ARegistryRepository : IRegistryRepository; const ASectionKey : string) : TShortCut;

    function IsVersionAllowed(const AVSFixedFileInfo : TVSFixedFileInfo) : Boolean; override;
    procedure PopulateShortCuts(); override;
    procedure GetShortCuts(const ARegistryKey: string); virtual;
    function GetName() : string; override;
    function GetMmxHighVersion() : Integer; virtual;
    function GetMmxLowVersion() : Integer; virtual;
    function GetDescription() : string; override;
  public
    function IsUseable() : Boolean; override;
  end;

implementation

uses
  nick.shortcut.repository.ShortCut,
  nick.shortcut.builder.ShortCutItem,
  {$IFDEF VER220}
  SysUtils;
  {$ELSE}
  System.SysUtils;
  {$ENDIF}

function TMMX10Element.EnabledDecoder(const ARegistryRepository: IRegistryRepository; const ASectionKey: string): Boolean;
begin
  Result := (ARegistryRepository.ReadBool(ASectionKey));
end;

function TMMX10Element.GetDescription: string;
begin
  Result := 'Award winning Refactoring Browser with Delphi pascal and C# .Net support.' +
     System.sLineBreak + System.sLineBreak + 'http://www.modelmakertools.com/code-explorer/index.html';
end;

procedure TMMX10Element.PopulateShortCuts();
var
  LRegistryKey: string;
  LBDSVersion : Integer;
begin
  LBDSVersion := RepositoryFactory().ToolsApiRepository().GetBDSVersion();

  LRegistryKey := '\Software\ModelMaker\MideX\' + IntToStr(GetMmxHighVersion()) + '.0\KeyBindingsEx\BDS ' + IntToStr(LBDSVersion);
  GetShortCuts(LRegistryKey);
end;

procedure TMMX10Element.GetShortCuts(const ARegistryKey: string);
begin
  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('ModelMaker Code Explorer')
                                    .WithDescription('MMX -> Code Explorer -> ModelMaker Code Explorer')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('ShowMIDEXExplorerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Locate Editor Position')
                                    .WithDescription('MMX -> Code Explorer -> Locate Editor Position')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('SyncMideXExplorerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Member Search Bar')
                                    .WithDescription('MMX -> Code Explorer -> Member Search Bar')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMemberSearchBarAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Module Search')
                                    .WithDescription('MMX -> Code Explorer -> Module Search')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXModuleSearchAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Search Identifier')
                                    .WithDescription('MMX -> Source Indexer -> Search Identifier')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSourceIndexerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Show Source Indexer')
                                    .WithDescription('MMX -> Source Indexer -> Show Source Indexer')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXShowSourceIndexerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Search in File')
                                    .WithDescription('MMX -> Source Indexer -> Search in File')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXFindInFileAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Find selected Component')
                                    .WithDescription('MMX -> Source Indexer -> Find selected Component')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXFindComponentRefsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Next Indexer Match')
                                    .WithDescription('MMX -> Source Indexer -> Next Indexer Match')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNextIndexerMatchAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Previous Indexer Match')
                                    .WithDescription('MMX -> Source Indexer -> Previous Indexer Match')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPrevIndexerMatchAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Live Documentation')
                                    .WithDescription('MMX -> Live Documentation')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXLiveDocAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Class')
                                    .WithDescription('MMX -> Add -> Add Class')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddClassAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Interface')
                                    .WithDescription('MMX -> Add -> Add Interface')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddInterfaceAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Record')
                                    .WithDescription('MMX -> Add -> Add Record')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddStructAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Descendant')
                                    .WithDescription('MMX -> Add -> Add Descendant')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddDescendantAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Field')
                                    .WithDescription('MMX -> Add -> Add Field')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddFieldAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Method')
                                    .WithDescription('MMX -> Add -> Add Method')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddMethodAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Property')
                                    .WithDescription('MMX -> Add -> Add Property')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddPropertyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Indexer')
                                    .WithDescription('MMX -> Add -> Add Indexer')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddIndexerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Event')
                                    .WithDescription('MMX -> Add -> Add Event')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddEventAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Operators')
                                    .WithDescription('MMX -> Add -> Add Operators')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddOperatorsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Procedure')
                                    .WithDescription('MMX -> Add -> Add Procedure')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddProcedureAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Delegate')
                                    .WithDescription('MMX -> Add -> Add Delegate')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddDelegateAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Delegate from Method')
                                    .WithDescription('MMX -> Add -> Delegate from Method')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDelegateFromMethodAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Local Var')
                                    .WithDescription('MMX -> Add -> Add Local Var...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddLocalVarAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Explaining Var')
                                    .WithDescription('MMX -> Add -> Add Explaining Var...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddExplainingVarAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add Parameter')
                                    .WithDescription('MMX -> Add -> Add Parameter')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddParamAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Cut Entity')
                                    .WithDescription('MMX -> Clipboard -> Cut Entity')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCutEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Copy Entity')
                                    .WithDescription('MMX -> Clipboard -> Copy Entity')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCopyEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Paste Entity')
                                    .WithDescription('MMX -> Clipboard -> Paste Entity')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPasteEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Paste Prototype')
                                    .WithDescription('MMX -> Clipboard -> Paste Prototype')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPastePrototypeAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Select Token and Cut')
                                    .WithDescription('MMX -> Clipboard -> Select Token and Cut')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSelectCutAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Select Token and Copy')
                                    .WithDescription('MMX -> Clipboard -> Select Token and Copy')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSelectCopyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Select Token and Paste')
                                    .WithDescription('MMX -> Clipboard -> Select Token and Paste')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSelectPasteAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Edit Entity')
                                    .WithDescription('MMX -> Edit Entity...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXEditEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Delete Entity')
                                    .WithDescription('MMX -> Delete Entity...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDeleteEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Undo last operation')
                                    .WithDescription('MMX -> Undo last operation')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXUndoLastAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Navigate Up')
                                    .WithDescription('MMX -> Navigate and Move -> Navigate Up')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNavigateUpAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Navigate Down')
                                    .WithDescription('MMX -> Navigate and Move -> Navigate Down')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNavigateDownAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Previous Entity')
                                    .WithDescription('MMX -> Navigate and Move -> Previous Entity')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPreviousEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Next Entity')
                                    .WithDescription('MMX -> Navigate and Move -> Next Entity')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNextEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Move Entity Up')
                                    .WithDescription('MMX -> Navigate and Move -> Move Entity Up')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMoveUpAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Move Entity Down')
                                    .WithDescription('MMX -> Navigate and Move -> Move Entity Down')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMoveDownAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Move selection up')
                                    .WithDescription('MMX -> Navigate and Move -> Move selection up')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMoveSelectionUpAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Move selection down')
                                    .WithDescription('MMX -> Navigate and Move -> Move selection down')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMoveSelectionDownAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Find next occurence')
                                    .WithDescription('MMX -> Navigate and Move -> Find next occurence')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXFindIdentNextAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Find previous occurence')
                                    .WithDescription('MMX -> Navigate and Move -> Find previous occurence')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXFindIdentPrevAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Custom identifier search')
                                    .WithDescription('MMX -> Navigate and Move -> Custom identifier search')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCustomIdentSearchAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Show Related Classes')
                                    .WithDescription('MMX -> Navigate and Move -> Show Related Classes')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXRelatedClassesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Toggle Favorite')
                                    .WithDescription('MMX -> Navigate and Move -> Toggle Favorite')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXToggleFavoriteAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Add to History')
                                    .WithDescription('MMX -> Navigate and Move -> Add to History')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAddToHistoryAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('History')
                                    .WithDescription('MMX -> Navigate and Move -> History')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXGlobalHistoryAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Go to previous History Entry')
                                    .WithDescription('MMX -> Navigate and Move -> Go to previous History Entry')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXHistoryBackAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Back to Editing Position')
                                    .WithDescription('MMX -> Navigate and Move -> Back to Editing Position')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXBackToEditPositionAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Surround With Template')
                                    .WithDescription('MMX -> Surround with -> Surround With Template')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXEmbraceWithTemplateAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('try..finally Wizard')
                                    .WithDescription('MMX -> Surround with -> try..finally Wizard')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXTryFinallyWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Surround with Default Block')
                                    .WithDescription('MMX -> Surround with -> Surround with Default Block')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDefaultBlockWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Multi line surround wizard')
                                    .WithDescription('MMX -> Surround with -> Multi line surround wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMultiLineSurroundAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Surround with Parentheses')
                                    .WithDescription('MMX -> Surround with -> Surround with Parentheses')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSurroundWidthParenthesesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Sync Declaration/Implementation')
                                    .WithDescription('MMX -> Sync Declaration/Implementation')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSyncDeclImplAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Extract Method')
                                    .WithDescription('MMX -> Extract Method...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXExtractMethodAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Extract Property')
                                    .WithDescription('MMX -> Extract Property')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXExtractPropertyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Apply Class Template')
                                    .WithDescription('MMX -> Apply Class Template')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXApplyClassTemplateAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Rename in Scope')
                                    .WithDescription('MMX -> Rename in Scope...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXRenameLocalAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Parameter Wizard')
                                    .WithDescription('MMX -> Parameter Wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXRenameParamAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert to Field')
                                    .WithDescription('MMX -> Conversion -> Convert to Field')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXConvertToFieldAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert to Method')
                                    .WithDescription('MMX -> Conversion -> Convert to Method')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXConvertToMethodAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('String to resourcestring')
                                    .WithDescription('MMX -> Conversion -> String to resourcestring')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXResourceStringAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Module String Wizard')
                                    .WithDescription('MMX -> Conversion -> Module String Wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXModuleStringWizard')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Multi File String Wizard')
                                    .WithDescription('MMX -> Conversion -> Multi File String Wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXMultiFileStringWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert to Property')
                                    .WithDescription('MMX -> Conversion -> Convert to Property')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXConvertToPropertyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert to const')
                                    .WithDescription('MMX -> Conversion -> Convert to const')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXConvertConstAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Default sort class')
                                    .WithDescription('MMX -> Sorting -> Default sort class')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDefaultSortClassAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Default Sort selected Members')
                                    .WithDescription('MMX -> Sorting -> Default Sort selected Members')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDefaultSortMembersAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Default Sort All Classes')
                                    .WithDescription('MMX -> Sorting -> Default Sort All Classes')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDefaultSortAllClassesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Rearrange Members')
                                    .WithDescription('MMX -> Sorting -> Rearrange Members...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXRearrangeMembersAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Order implementations like interface')
                                    .WithDescription('MMX -> Sorting -> Order implementations like interface')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSortImplementationLikeInterfaceAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Normalize local vars')
                                    .WithDescription('MMX -> Sorting -> Normalize local vars')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNormalizeLocalsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Normalize local vars in module')
                                    .WithDescription('MMX -> Sorting -> Normalize local vars in module')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNormalizeLocalsModuleAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Format Uses Clause')
                                    .WithDescription('MMX -> Sorting -> Format Uses Clause')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNormalizeUsesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Format Uses - Alternate')
                                    .WithDescription('MMX -> Sorting -> Format Uses - Alternate')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXNormalizeUsesAlternateAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Sort text')
                                    .WithDescription('MMX -> Sorting -> Sort text')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSortTextAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Close all other files')
                                    .WithDescription('MMX -> Tools -> Close all other files')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCloseAllAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Unit Dependencies')
                                    .WithDescription('MMX -> Tools -> Unit Dependencies...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXUnitDependenciesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Linked Module Analyzer')
                                    .WithDescription('MMX -> Tools -> Linked Module Analyzer...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXModuleAnalyzerAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Use')
                                    .WithDescription('MMX -> Tools -> Use...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXUseUnitAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Open Unit')
                                    .WithDescription('MMX -> Tools -> Open Unit...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXOpenUnitAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Locate Type')
                                    .WithDescription('MMX -> Tools -> Locate Type')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXLocateTypeAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Accelerator Key wizard')
                                    .WithDescription('MMX -> Tools -> Accelerator Key wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAcceleratorWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Action list Shortcut wizard')
                                    .WithDescription('MMX -> Tools -> Action list Shortcut wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXShortcutWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Editor Search Bar')
                                    .WithDescription('MMX -> Tools -> Editor Search Bar')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXEditorSearchBarAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert with statement')
                                    .WithDescription('MMX -> Tools -> Convert with statement')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXWithConverterAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Insert Attributes')
                                    .WithDescription('MMX -> Tools -> Insert Attributes...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXAttributesWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Creational Wizard')
                                    .WithDescription('MMX -> Tools -> Creational Wizard...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCreationalWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Hide non-visual Components')
                                    .WithDescription('MMX -> Tools -> Hide non-visual Components')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXHideNonVisualsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Show non-visual Components')
                                    .WithDescription('MMX -> Tools -> Show non-visual Components')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXShowNonVisualsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Package classes report')
                                    .WithDescription('MMX -> Tools -> Package classes report...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPackageClassesReportAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Event handler view')
                                    .WithDescription('MMX -> Tools -> Event handler view')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXShowEventHandlersAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Extract Class definitions from Assembly')
                                    .WithDescription('MMX -> Tools -> Extract Class definitions from Assembly')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXImportAssemblyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Comment Member(s)')
                                    .WithDescription('MMX -> Text Tools -> Comment Member(s)')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCommentEntityAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Toggle Comment Selection')
                                    .WithDescription('MMX -> Text Tools -> Toggle Comment Selection')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCommentSelectionAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Select Method Body')
                                    .WithDescription('MMX -> Text Tools -> Select Method Body')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSelectMethodBodyAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Reverse Assignment')
                                    .WithDescription('MMX -> Text Tools -> Reverse Assignment')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXReverseAssignmentAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Insert Component Name')
                                    .WithDescription('MMX -> Text Tools -> Insert Component Name')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXComponentNameAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Sync Edit Method')
                                    .WithDescription('MMX -> Text Tools -> Sync Edit Method')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXSyncEditAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Duplicate Lines')
                                    .WithDescription('MMX -> Text Tools -> Duplicate Lines')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXDuplicateLinesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Align Code')
                                    .WithDescription('MMX -> Text Tools -> Align Code')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCodeAlignmentAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Format Reserved Words')
                                    .WithDescription('MMX -> Text Tools -> Format Reserved Words')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXFmtResWordsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Untabify')
                                    .WithDescription('MMX -> Text Tools -> Untabify')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXExpandTabsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Tabify')
                                    .WithDescription('MMX -> Text Tools -> Tabify')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXOptimalFillTabsAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Trim white space')
                                    .WithDescription('MMX -> Text Tools -> Trim white space')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXWhiteSpaceWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Convert Code To String')
                                    .WithDescription('MMX -> Text Tools -> Convert Code To String')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXCodeToStringWizardAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Popup Menu')
                                    .WithDescription('MMX -> MMX Popup Menu')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPopupmenuAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();

  nick.shortcut.builder.ShortCutItem.NewShortCutItemBuilder(Self)
                                    .WithDetail('Properties')
                                    .WithDescription('MMX -> Properties...')
                                    .WithShortCut(scNone)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('MMXPropertiesAction')
                                    .WithDecoder(ShortCutDecoder)
                                    .WithActiveState(True)
                                    .IsRegistry()
                                    .WithPath(ARegistryKey)
                                    .WithKey('Enabled')
                                    .WithDecoder(EnabledDecoder)
                                    .Build();
end;

function TMMX10Element.ShortCutDecoder(const ARegistryRepository: IRegistryRepository; const ASectionKey: string): TShortCut;
var
  LValue: string;
  LIdx: Integer;
  LInteger: Integer;
begin
  Result := scNone;
   LValue := ARegistryRepository.ReadString(ASectionKey);
   LIdx := Pos(';', LValue);

   if (LIdx = 0) then
     Exit;

   if TryStrToInt(Copy(LValue, 2, LIdx - 2), LInteger) then
     Result := LInteger;
end;

function TMMX10Element.GetMmxHighVersion(): Integer;
begin
  Result := 10;
end;

function TMMX10Element.GetMmxLowVersion: Integer;
begin
  Result := 0;
end;

function TMMX10Element.GetName: string;
begin
  Result := Format('MMX v%d.%d', [GetMmxHighVersion(), GetMmxLowVersion()]);
end;

function TMMX10Element.IsUseable: Boolean;
begin
  Result := CheckForExpertDLL('MidexExpert');
end;

function TMMX10Element.IsVersionAllowed(const AVSFixedFileInfo: TVSFixedFileInfo): Boolean;
begin
  Result := (HiWord(AVSFixedFileInfo.dwFileVersionMS) = GetMmxHighVersion()) and
            (LoWord(AVSFixedFileInfo.dwFileVersionMS) = GetMmxLowVersion());
end;

initialization
  nick.shortcut.repository.ShortCut.GetShortCutRepository().Add(TMMX10Element);

end.
